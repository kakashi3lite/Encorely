name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

env:
  DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: macos-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git

      - name: Generate version
        id: version
        run: |
          # Get current version from project
          CURRENT_VERSION=$(grep -o 'MARKETING_VERSION = [^;]*' *.xcconfig | head -1 | cut -d' ' -f3)
          echo "Current version: $CURRENT_VERSION"
          
          # Calculate next version based on release type
          case "${{ github.event.inputs.release_type }}" in
            "major")
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print ($1+1)".0.0"}')
              ;;
            "minor")
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."($2+1)".0"}')
              ;;
            "patch")
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')
              ;;
          esac
          
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog for this release
          CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update version in project files
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Update version in xcconfig files
          find . -name "*.xcconfig" -exec sed -i '' "s/MARKETING_VERSION = .*/MARKETING_VERSION = $VERSION/g" {} \;
          
          # Update version in Package.swift if it exists
          if [ -f "Package.swift" ]; then
            sed -i '' "s/version: \".*\"/version: \"$VERSION\"/g" Package.swift
          fi

      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          DATE=$(date +"%Y-%m-%d")
          
          # Create new changelog entry
          echo "## [$VERSION] - $DATE" > temp_changelog.md
          echo "" >> temp_changelog.md
          echo "${{ steps.changelog.outputs.changelog }}" >> temp_changelog.md
          echo "" >> temp_changelog.md
          
          # Prepend to existing changelog
          if [ -f "CHANGELOG.md" ]; then
            tail -n +2 CHANGELOG.md >> temp_changelog.md
          fi
          
          mv temp_changelog.md CHANGELOG.md

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore(release): bump version to ${{ steps.version.outputs.version }}"
          git tag "v${{ steps.version.outputs.version }}"
          git push origin main
          git push origin "v${{ steps.version.outputs.version }}"

  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    needs: [prepare-release]
    if: always() && (needs.prepare-release.result == 'success' || github.event_name == 'push')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.2"

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Install dependencies
        run: |
          bundle install
          gem install xcodegen

      - name: Generate Xcode project
        run: xcodegen generate

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Run tests
        run: |
          fastlane test

      - name: Build for release
        run: |
          fastlane build_release

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/
            *.ipa
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    if: always() && needs.build-and-test.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ needs.prepare-release.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: AI-Mixtapes v${{ steps.get_version.outputs.version }}
          body: |
            ## What's Changed
            
            ${{ needs.prepare-release.outputs.changelog || 'See CHANGELOG.md for details' }}
            
            ## Installation
            
            Download the latest build from the assets below.
            
            ## Full Changelog
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.get_version.outputs.version }}...HEAD
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Notify team
        run: |
          echo "üéâ Release v${{ needs.prepare-release.outputs.version }} has been created!"
          echo "üì¶ Build artifacts are available in the release"
          echo "üìù Changelog has been updated"
          # Add additional notification logic here (Slack, Discord, etc.)