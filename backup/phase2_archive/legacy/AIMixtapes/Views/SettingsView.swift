import SwiftUI

struct SettingsView: View {
    // MARK: - Environment Objects
    @EnvironmentObject private var appState: AppState
    @EnvironmentObject private var musicAuthorizationManager: MusicAuthorizationManager
    @EnvironmentObject private var mixtapeStore: MixtapeStore
    
    var aiService: AIIntegrationService

    // MARK: - AI Settings
    @AppStorage("useAudioAnalysis") private var useAudioAnalysis = true
    @AppStorage("useFacialExpressions") private var useFacialExpressions = true
    @AppStorage("useSiriIntegration") private var useSiriIntegration = true
    @AppStorage("enableAIRecommendations") private var enableAIRecommendations = true
    @AppStorage("autoGenerateDaily") private var autoGenerateDaily = false
    
    // MARK: - Music Settings
    @AppStorage("preferredAudioQuality") private var preferredAudioQuality = "High"
    @AppStorage("enableExplicitContent") private var enableExplicitContent = false
    @AppStorage("enableCellularDownloads") private var enableCellularDownloads = false
    @AppStorage("defaultMixtapeLength") private var defaultMixtapeLength = 15.0
    
    // MARK: - App Preferences
    @AppStorage("enableNotifications") private var enableNotifications = true
    @AppStorage("enableHapticFeedback") private var enableHapticFeedback = true
    @AppStorage("enableAnalytics") private var enableAnalytics = true
    @AppStorage("enableCrashReporting") private var enableCrashReporting = true
    @AppStorage("selectedAppearance") private var selectedAppearance = "system"

    @State private var showPersonalitySettings = false
    @State private var showMoodSettings = false
    @State private var showSiriSettings = false
    @State private var showingClearDataAlert = false
    @State private var showingAbout = false
    @State private var showingPrivacyPolicy = false
    @State private var showingTermsOfService = false
    @State private var showingExportSheet = false

    var body: some View {
        Form {
            // Profile Section
            profileSection
            
            // Music Settings
            musicSettingsSection
            
            // AI Features section
            Section {
                Toggle("Audio Analysis", isOn: $useAudioAnalysis)
                    .onChange(of: useAudioAnalysis) { _ in
                        aiService.trackInteraction(type: "setting_audio_analysis_toggle")
                    }

                Toggle("Facial Expression Detection", isOn: $useFacialExpressions)
                    .onChange(of: useFacialExpressions) { _ in
                        aiService.trackInteraction(type: "setting_facial_expressions_toggle")
                    }

                Toggle("Siri Integration", isOn: $useSiriIntegration)
                    .onChange(of: useSiriIntegration) { _ in
                        aiService.trackInteraction(type: "setting_siri_integration_toggle")
                    }
                
                Toggle("AI Recommendations", isOn: $enableAIRecommendations)
                    .onChange(of: enableAIRecommendations) { _ in
                        aiService.trackInteraction(type: "setting_ai_recommendations_toggle")
                    }
                
                Toggle("Auto-Generate Daily Mixtape", isOn: $autoGenerateDaily)
                    .onChange(of: autoGenerateDaily) { _ in
                        aiService.trackInteraction(type: "setting_auto_generate_toggle")
                    }
            } header: {
                Label("AI Features", systemImage: "brain")
            }

            // Personality & Mood section
            Section {
                NavigationLink(destination: PersonalityView(personalityEngine: aiService.personalityEngine)) {
                    HStack {
                        Label(
                            title: { Text("Music Personality") },
                            icon: { Image(systemName: aiService.personalityEngine.currentPersonality.icon) }
                        )
                        Spacer()
                        Text(aiService.personalityEngine.currentPersonality.rawValue)
                            .foregroundColor(.secondary)
                    }
                }

                NavigationLink(destination: MoodView(moodEngine: aiService.moodEngine)) {
                    HStack {
                        Label(
                            title: { Text("Default Mood") },
                            icon: { Image(systemName: aiService.moodEngine.currentMood.systemIcon) }
                        )
                        Spacer()
                        Text(aiService.moodEngine.currentMood.rawValue)
                            .foregroundColor(aiService.moodEngine.currentMood.color)
                    }
                }
            } header: {
                Label("Personalization", systemImage: "person.fill")
            }

            // App Preferences
            appPreferencesSection
            
            // Performance section
            Section {
                NavigationLink(destination: AudioSettingsView()) {
                    Label("Audio Processing", systemImage: "waveform")
                }

                NavigationLink(destination: StorageSettingsView()) {
                    Label("Storage & Caching", systemImage: "internaldrive")
                }
                
                // Default Mixtape Length
                VStack(alignment: .leading, spacing: 8) {
                    HStack {
                        Text("Default Mixtape Length")
                        Spacer()
                        Text("\(Int(defaultMixtapeLength)) songs")
                            .foregroundColor(.secondary)
                    }
                    
                    Slider(value: $defaultMixtapeLength, in: 5...50, step: 1)
                        .accentColor(.accentColor)
                }
            } header: {
                Label("Performance", systemImage: "gauge")
            }

            // Integrations section
            Section {
                NavigationLink(destination: SiriShortcutsView(aiService: aiService)) {
                    Label("Manage Siri Shortcuts", systemImage: "mic.circle")
                }

                NavigationLink(destination: NotificationSettingsView()) {
                    Label("Notifications", systemImage: "bell")
                }
            } header: {
                Label("Integrations", systemImage: "link")
            }

            // Privacy & Data
            privacySection
            
            // Data section
            Section {
                // Storage Usage
                HStack {
                    Text("Storage Used")
                    Spacer()
                    Text("\(calculateStorageUsage()) MB")
                        .foregroundColor(.secondary)
                }
                
                // Export Data
                Button("Export My Data") {
                    showingExportSheet = true
                }
                
                Button(role: .destructive) {
                    showingClearDataAlert = true
                } label: {
                    Label("Clear App Data", systemImage: "trash")
                }
            } header: {
                Label("Data", systemImage: "externaldrive")
            }

            // About section
            Section {
                // About
                Button("About AI Mixtapes") {
                    showingAbout = true
                }
                
                // Contact Support
                Button("Contact Support") {
                    contactSupport()
                }
                
                // Rate App
                Button("Rate App") {
                    rateApp()
                }
                
                // Share App
                Button("Share App") {
                    shareApp()
                }
                
                HStack {
                    Text("Version")
                    Spacer()
                    Text(Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "1.0.0")
                        .foregroundColor(.secondary)
                }

                Button("Privacy Policy") {
                    showingPrivacyPolicy = true
                }

                Button("Terms of Service") {
                    showingTermsOfService = true
                }

                HStack {
                    Text("Developer")
                    Spacer()
                    Text("Swanand Tanavade")
                        .foregroundColor(.secondary)
                }
            } header: {
                Label("About", systemImage: "info.circle")
            }
        }
        .navigationTitle("Settings")
        .sheet(isPresented: $showingAbout) {
            AboutView()
        }
        .sheet(isPresented: $showingPrivacyPolicy) {
            WebView(url: URL(string: "https://aimmixtapes.app/privacy")!)
        }
        .sheet(isPresented: $showingTermsOfService) {
            WebView(url: URL(string: "https://aimmixtapes.app/terms")!)
        }
        .sheet(isPresented: $showingExportSheet) {
            ExportDataView()
        }
        .alert("Clear App Data", isPresented: $showingClearDataAlert) {
            Button("Cancel", role: .cancel) {}
            Button("Clear All Data", role: .destructive) {
                clearAppData()
            }
        } message: {
            Text(
                "This will remove all your mixtapes, settings, and personalization data. This action cannot be undone.")
        }
    }

    private func clearAppData() {
        // Implement data clearing
        aiService.trackInteraction(type: "clear_app_data")
    }
    
    // MARK: - View Sections
    
    private var profileSection: some View {
        Section {
            HStack {
                Circle()
                    .fill(Color.accentColor.gradient)
                    .frame(width: 60, height: 60)
                    .overlay {
                        Text("AI")
                            .font(.title2)
                            .fontWeight(.bold)
                            .foregroundColor(.white)
                    }
                
                VStack(alignment: .leading, spacing: 4) {
                    Text("AI Mixtapes User")
                        .font(.headline)
                        .fontWeight(.semibold)
                    
                    Text("\(mixtapeStore.mixtapes.count) mixtapes created")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    
                    if musicAuthorizationManager.canPlayMusic {
                        Label("Apple Music Connected", systemImage: "checkmark.circle.fill")
                            .font(.caption)
                            .foregroundColor(.green)
                    } else {
                        Label("Apple Music Not Connected", systemImage: "exclamationmark.circle.fill")
                            .font(.caption)
                            .foregroundColor(.orange)
                    }
                }
                
                Spacer()
            }
            .padding(.vertical, 8)
        }
    }
    
    private var musicSettingsSection: some View {
        Section("Music Settings") {
            // Apple Music Authorization
            HStack {
                Label("Apple Music", systemImage: "music.note")
                
                Spacer()
                
                if musicAuthorizationManager.canPlayMusic {
                    Text("Connected")
                        .foregroundColor(.green)
                        .font(.caption)
                } else {
                    Button("Connect") {
                        Task {
                            await musicAuthorizationManager.requestAuthorization()
                        }
                    }
                    .buttonStyle(.bordered)
                    .controlSize(.small)
                }
            }
            
            // Audio Quality
            Picker("Audio Quality", selection: $preferredAudioQuality) {
                Text("High (256 kbps)").tag("High")
                Text("Medium (128 kbps)").tag("Medium")
                Text("Low (64 kbps)").tag("Low")
                Text("Lossless").tag("Lossless")
            }
            
            // Explicit Content
            Toggle("Allow Explicit Content", isOn: $enableExplicitContent)
            
            // Cellular Downloads
            Toggle("Download over Cellular", isOn: $enableCellularDownloads)
        }
    }
    
    private var appPreferencesSection: some View {
        Section("App Preferences") {
            // Notifications
            Toggle("Enable Notifications", isOn: $enableNotifications)
            
            // Haptic Feedback
            Toggle("Haptic Feedback", isOn: $enableHapticFeedback)
            
            // Appearance
            Picker("Appearance", selection: $selectedAppearance) {
                Text("System").tag("system")
                Text("Light").tag("light")
                Text("Dark").tag("dark")
            }
            .onChange(of: selectedAppearance) { newValue in
                updateAppearance(newValue)
            }
        }
    }
    
    private var privacySection: some View {
        Section("Privacy & Analytics") {
            // Analytics
            Toggle("Share Analytics", isOn: $enableAnalytics)
            
            // Crash Reporting
            Toggle("Crash Reporting", isOn: $enableCrashReporting)
        }
    }
    
    // MARK: - Helper Methods
    
    private func calculateStorageUsage() -> String {
        let mixtapeCount = mixtapeStore.mixtapes.count
        let estimatedSize = mixtapeCount * 2 // Rough estimate: 2MB per mixtape
        return "\(estimatedSize)"
    }
    
    private func updateAppearance(_ appearance: String) {
        guard let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene else {
            return
        }
        
        for window in windowScene.windows {
            switch appearance {
            case "light":
                window.overrideUserInterfaceStyle = .light
            case "dark":
                window.overrideUserInterfaceStyle = .dark
            default:
                window.overrideUserInterfaceStyle = .unspecified
            }
        }
    }
    
    private func contactSupport() {
        if let url = URL(string: "mailto:support@aimmixtapes.app?subject=AI%20Mixtapes%20Support") {
            UIApplication.shared.open(url)
        }
    }
    
    private func rateApp() {
        if let url = URL(string: "https://apps.apple.com/app/id123456789?action=write-review") {
            UIApplication.shared.open(url)
        }
    }
    
    private func shareApp() {
        let shareText = "Check out AI Mixtapes - Create personalized playlists with AI!"
        let shareURL = URL(string: "https://apps.apple.com/app/ai-mixtapes/id123456789")!
        
        let activityVC = UIActivityViewController(
            activityItems: [shareText, shareURL],
            applicationActivities: nil
        )
        
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = windowScene.windows.first {
            window.rootViewController?.present(activityVC, animated: true)
        }
    }
}

// MARK: - Supporting Views

struct AboutView: View {
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 24) {
                    // App Icon
                    Image(systemName: "music.note.list")
                        .font(.system(size: 80))
                        .foregroundColor(.accentColor)
                    
                    // App Info
                    VStack(spacing: 8) {
                        Text("AI Mixtapes")
                            .font(.title)
                            .fontWeight(.bold)
                        
                        Text("Version \(Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "1.0")")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                    }
                    
                    // Description
                    Text("Create personalized mixtapes powered by artificial intelligence. Discover new music that matches your mood and preferences.")
                        .font(.body)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal)
                    
                    // Credits
                    VStack(spacing: 16) {
                        Text("Created with ❤️ by the AI Mixtapes Team")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        
                        Text("Powered by Apple MusicKit and Core ML")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    
                    Spacer(minLength: 50)
                }
                .padding()
            }
            .navigationTitle("About")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") {
                        dismiss()
                    }
                }
            }
        }
    }
}

struct ExportDataView: View {
    @Environment(\.dismiss) private var dismiss
    @EnvironmentObject private var mixtapeStore: MixtapeStore
    
    var body: some View {
        NavigationView {
            VStack(spacing: 24) {
                Image(systemName: "square.and.arrow.up")
                    .font(.system(size: 60))
                    .foregroundColor(.accentColor)
                
                VStack(spacing: 8) {
                    Text("Export Your Data")
                        .font(.title2)
                        .fontWeight(.semibold)
                    
                    Text("Export all your mixtapes and preferences as a JSON file.")
                        .font(.body)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                }
                
                Button("Export Data") {
                    exportData()
                }
                .buttonStyle(.borderedProminent)
                .controlSize(.large)
                
                Spacer()
            }
            .padding()
            .navigationTitle("Export Data")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") {
                        dismiss()
                    }
                }
            }
        }
    }
    
    private func exportData() {
        // Create export data
        let exportData = [
            "mixtapes": mixtapeStore.mixtapes,
            "exportDate": Date().ISO8601Format()
        ]
        
        // Convert to JSON and share
        do {
            let jsonData = try JSONSerialization.data(withJSONObject: exportData, options: .prettyPrinted)
            let tempURL = FileManager.default.temporaryDirectory.appendingPathComponent("ai-mixtapes-export.json")
            try jsonData.write(to: tempURL)
            
            let activityVC = UIActivityViewController(activityItems: [tempURL], applicationActivities: nil)
            
            if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
               let window = windowScene.windows.first {
                window.rootViewController?.present(activityVC, animated: true)
            }
        } catch {
            print("Export failed: \(error)")
        }
    }
}

struct WebView: View {
    let url: URL
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            Text("Web content would load here")
                .navigationTitle("Web View")
                .navigationBarTitleDisplayMode(.inline)
                .toolbar {
                    ToolbarItem(placement: .navigationBarTrailing) {
                        Button("Done") {
                            dismiss()
                        }
                    }
                }
        }
    }
}

struct AudioSettingsView: View {
    @AppStorage("audioQuality") private var audioQuality = "High"
    @AppStorage("enableEqualizer") private var enableEqualizer = true

    var body: some View {
        Form {
            Section(header: Text("Audio Quality")) {
                Picker("Quality", selection: $audioQuality) {
                    Text("High").tag("High")
                    Text("Medium").tag("Medium")
                    Text("Low").tag("Low")
                }
            }

            Section(header: Text("Equalizer")) {
                Toggle("Enable Equalizer", isOn: $enableEqualizer)
            }
        }
        .navigationTitle("Audio Settings")
    }
}

struct StorageSettingsView: View {
    @State private var cacheSize = "234 MB"
    @State private var clearingCache = false

    var body: some View {
        Form {
            Section(header: Text("Cache")) {
                HStack {
                    Text("Cache Size")
                    Spacer()
                    Text(cacheSize)
                        .foregroundColor(.secondary)
                }

                Button(action: clearCache) {
                    if clearingCache {
                        ProgressView()
                            .progressViewStyle(CircularProgressViewStyle())
                    } else {
                        Text("Clear Cache")
                    }
                }
                .disabled(clearingCache)
            }
        }
        .navigationTitle("Storage Settings")
    }

    private func clearCache() {
        clearingCache = true
        // Implement cache clearing
        clearingCache = false
    }
}

struct NotificationSettingsView: View {
    @AppStorage("notifyNewMixtapes") private var notifyNewMixtapes = true
    @AppStorage("notifyMoodChanges") private var notifyMoodChanges = true

    var body: some View {
        Form {
            Toggle("New AI Mixtapes", isOn: $notifyNewMixtapes)
            Toggle("Mood Changes", isOn: $notifyMoodChanges)
        }
        .navigationTitle("Notifications")
    }
}
